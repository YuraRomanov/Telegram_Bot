import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage

API_TOKEN = os.getenv('API_TOKEN')

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
masters = [123456789]  # –¢–≤–æ–π ID –∫–∞–∫ –ú–∞—Å—Ç–µ—Ä–∞ (–ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º —Å—é–¥–∞ –¥—Ä—É–≥–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤)
workers = []  # –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
class TaskState(StatesGroup):
    detail = State()
    quantity = State()
    deadline = State()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–º—É
@dp.message_handler(commands=['add'], user_id=masters)
async def add_task(message: types.Message):
    await message.answer("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏:")
    await TaskState.detail.set()

@dp.message_handler(state=TaskState.detail)
async def process_detail(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['detail'] = message.text
    await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–∞–ª–µ–π:")
    await TaskState.quantity.set()

@dp.message_handler(state=TaskState.quantity)
async def process_quantity(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['quantity'] = message.text
    await message.answer("–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
    await TaskState.deadline.set()

@dp.message_handler(state=TaskState.deadline)
async def process_deadline(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['deadline'] = message.text
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–∏–º
    for worker_id in workers:
        await bot.send_message(
            worker_id,
            f"üìç –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:\nüîß –î–µ—Ç–∞–ª—å: {data['detail']}\nüì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']}\n‚è≥ –°—Ä–æ–∫: {data['deadline']}"
        )
    await message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–±–æ—á–∏–º.")
    await state.finish()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def echo(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
